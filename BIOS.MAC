; ***********************************************************
; *                                                         *
; *  HRCPM12-BIOS fuer den AC 1     Version vom 02.04.2022  *
; *                                                         *
; ***********************************************************
;
        IF1
        .PRINTX 'PASS 1'
        ENDIF
;
        IF2
        .PRINTX 'PASS 2'
        ENDIF
;
        .CREF
        .Z80
;
        .PHASE 0E600H
;
OUTHEX  EQU  07EEH
OUTHL   EQU  07F1H
RSA     EQU  01A5H        ; CPU-Register nach RSA - nicht MO11 !
REGIST  EQU  05CEH        ; Registeranzeige - nicht MO11!
KLOAD   EQU  0B32H        ; Load From Kassette - Nicht MO11!!
;
;
CUPOS   EQU  1800H
BREAK   EQU  1818H        ; NMI Sprungziel
CBWSB   EQU  181FH        ; Das Testergebnis steht auf der Adresse 181Fh: 
;                         ; 0 = kein Color-BWS, sonst der eingestellte Farbwert.
ARG1    EQU  185BH
ARG2    EQU  185DH
;
;
WARMBT  EQU  0000H        ; WBOOT der Grundseite.
BDOSF   EQU  0005H        ; BDOS-Aufruf + TPA-MAX
RST38   EQU  0038H        ; CP/M-Break
NMI     EQU  0066H
;
;
IOBYTE  EQU  0003H
LWBYTE  EQU  0004H        ; LW+USER Nr.
;
ZEIPUF  EQU  0FFD0H       ; 1 + 32 Byte Puffer f. ?Tastatur
;
;
BDOS    EQU  0D806H       ; BDOS-EinsprungAdresse
WBOOTB  EQU  0E603H       ; BIOS-Eisprung WBOOT
;
;
HPRDSK  EQU  0B000H       ;Hilfsprogramm: Format RAM-Disk
EQUCCP  EQU  0D000H       ;Start CCP
;
PE5     EQU  0E5H         ;RAM-Disk Extended-Adresse
PE6     EQU  0E6H         ;RAM-Disk H-Adresse
PE7     EQU  0E7H         ;RAM-Disk L-Adresse
;
CFDC    EQU  40H          ;Hauptstatusregister FDC
DFDC    EQU  41H          ;Datenport FDC
WAIT    EQU  43H          ;IO-Adr. /WAIT Monoflop
LATCH   EQU  45H          ;IO-Adr. Latch 74LS175
;
;============================================================================
;
        JP   BOOT
        JP   WBOOT
        JP   CONST
        JP   CONIN
        JP   CONOUT
        JP   LIST
        JP   PUNCH
        JP   CONIN        ;eigentlich JP READER
        JP   HOME
        JP   SELDSK
        JP   SETTRK
        JP   SETSEC
        JP   SETDMA
        JP   READ
        JP   WRITE
        JP   LISTST
        JP   SECTRN
;
        DEFM 'C85AC'      ;fuer PC/BC Progr.
        JP   EXIT         ;User-Kommando EXIT
        JP   LOAD         ;User-Kommando LOAD
        JP   0000H
;
CCP:    DEFW 0D000H       ;Start CCP
;
NDISK:  DEFB 7            ;Anzahl der LW = 7
;
DPHX:   DEFW DPHY         ;Zeiger auf den 1. Block?
DPHY:   DEFW DPH0         ;DPH von LW A:
        DEFW DPH1         ;DPH von LW B:
        DEFW DPH2         ;DPH von LW C:
        DEFW DPH3         ;DPH von LW D:
        DEFW DPH4         ;DPH von LW E:
        DEFW DPH5         ;DPH von LW F:
        DEFW DPH6         ;DPH von LW G:
;
DPH0:   DEFW 0            ;RAM-Disk A:
        DEFW 0
        DEFW 0
        DEFW 0
        DEFW DIRBF
        DEFW DPB0
        DEFW CHK00
        DEFW ALL00
;
DPH1:   DEFW 0            ;Floppy B:
        DEFW 0
        DEFW 0
        DEFW 0
        DEFW DIRBF
        DEFW DPB1
        DEFW CHK00
        DEFW ALL01
;
DPH2:   DEFW 0            ;GIDE C:
        DEFW 0
        DEFW 0
        DEFW 0
        DEFW DIRBF
        DEFW DPB2
        DEFW CHK02
        DEFW ALL02
;
DPH3:   DEFW 0            ;GIDE D:
        DEFW 0
        DEFW 0
        DEFW 0
        DEFW DIRBF
        DEFW DPB3
        DEFW CHK02
        DEFW ALL03
;
DPH4:   DEFW 0            ;GIDE E:
        DEFW 0
        DEFW 0
        DEFW 0
        DEFW DIRBF
        DEFW DPB4
        DEFW CHK02
        DEFW ALL04
;
DPH5:   DEFW 0            ;Floppy F:
        DEFW 0
        DEFW 0
        DEFW 0
        DEFW DIRBF
        DEFW DPB5
        DEFW CHK02
        DEFW ALL05
;
DPH6:   DEFW 0            ;Floppy G:
        DEFW 0
        DEFW 0
        DEFW 0
        DEFW DIRBF
        DEFW DPB6
        DEFW CHK06
        DEFW ALL06
;
; https://hc-ddr.hucki.net/wiki/doku.php/cpm/write_a_bios/teil_1
;
        DEFW LEDF1        ;???
;
DPB0:   DEFW 128          ;128 Sectoren/Track (Rec/Trk) = 16k/Trk
        DEFB 4            ;Blockgroesse = 2 Kbyte
        DEFB 15
        DEFB 0            ;16Bit Blockadressen im FCB/DIR
        DEFW 503          ;504 * 2 Kbyte - Bloecke
        DEFW 63           ;64 DIR - Eintaege
        DEFW 080H         ;1 DIR-Block
        DEFW 0            ;weil nichtwechselbares Medium
        DEFW 1            ;16 Kbyte System / Track-Offset
;
        DEFW LF019        ;???
;
DPB1:   DEFW 80           ;80 Sectoren/Track
        DEFB 4            ;Blockgroesse = 2 Kbyte
        DEFB 15
        DEFB 0
        DEFW 389          ;390 * 2 Kbyte - Bloecke
        DEFW 127          ;128 DIR - Eintraege
        DEFW 0C0H         ;2 DIR-Bloecke
        DEFW 32
        DEFW 2            ;20 Kbyte System
;
        DEFB 3,7,5,25H
        DEFB 50H,0,43H,0FFH
        DEFB 0E1H,33H,0FFH
;
        DEFW LF015        ;???
;
DPB2:   DEFW 0800H        ;2048 Records/Track = 256k/Trk
        DEFB 5
        DEFB 1FH          ;4k Bloecke
        DEFB 1            ;16Bit Blockadressen im FCB/DIR
        DEFW 0FBFH        ;4032 * 4k-Bloecke = 16128k
        DEFW 07FFH        ;2048 DIR-Eintraege
        DEFW 0FFFFH       ;16 DIR-Bloecke
        DEFW 0            ;weil nichtwechselbares Medium
        DEFW 1            ;1 Trk = 256k System
;
        DEFB 2,3,0A0H,0AH
        DEFB 0,40H,0,0D8H
        DEFB 3,10H,20H
;
        DEFW LF015        ;???
;
DPB3:   DEFW 0800H        ;2048 Records/Track = 256k/Trk
        DEFB 6
        DEFB 3FH          ;8k Bloecke
        DEFB 3            ;16Bit Blockadressen im FCB/DIR
        DEFW 07FFH        ;2048 * 8k-Bloecke = 16384k = 16M
        DEFW 0FFFH        ;4096 DIR-Eintraege
        DEFW 0FFFFH       ;16 DIR-Bloecke
        DEFW 0            ;weil nichtwechselbares Medium
        DEFW 0            ;kein System-Track
;
        DEFB 2,3,0A0H,96H
        DEFB 0,40H,0,0D8H
        DEFB 3,10H,20H
;
        DEFW LF015        ;???
;
DPB4:   DEFW 0800H        ;2048 Records/Track = 256k/Trk
        DEFB 6
        DEFB 3FH          ;8k Bloecke
        DEFB 3            ;16Bit Blockadressen im FCB/DIR
        DEFW 07FFH        ;2048 * 8k-Bloecke = 16384k = 16M
        DEFW 0FFFH        ;4096 DIR-Eintraege
        DEFW 0FFFFH       ;16 DIR-Bloecke
        DEFW 0            ;weil nichtwechselbares Medium
        DEFW 0            ;kein System-Track
;
        DEFB 2,3,0A0H,2CH
        DEFB 1,40H,0,0D8H
        DEFB 3,10H,20H
;
        DEFW LF019        ;???
;
DPB5:   DEFW 64           ;64 Sectoren/Track
        DEFB 4            ;Blockgroesse = 2 Kbyte
        DEFB 15
        DEFB 0
        DEFW 319          ;320 * 2 Kbyte - Bloecke
        DEFW 127          ;128 DIR - Eintraege
        DEFW 0C0H         ;2 DIR-Bloecke
        DEFW 32
        DEFW 0            ;kein System-Track
;
        DEFB 1,1,10H,14H
        DEFB 50H,0,43H,0FFH
        DEFB 0E1H,33H,0FFH
;
        DEFW LF019        ;???
;
DPB6:   DEFW 80           ;80 Sectoren/Track
        DEFB 4            ;Blockgroesse = 2 Kbyte
        DEFB 15
        DEFB 0
        DEFW 399          ;400 * 2 Kbyte - Bloecke
        DEFW 127          ;128 DIR - Eintraege
        DEFW 0C0H         ;2 DIR-Bloecke
        DEFW 32
        DEFW 0            ;kein System-Track
;
        DEFB 3,7,5,25H
        DEFB 50H,1,43H,0FFH
        DEFB 0E1H,33H,0FFH
;
TXT01:  DEFB 0CH
        DEFM "HRCPM AC1 V1.2 CPA"
        DEFM "24.08.86 FA-MODE "
        DEFM "ConIn INT"
        DEFB 0FH
        DEFM " Stand 03.12.11"
        DEFB 0DH,0AH,0DH,0AH
        DEFM "GIDE(80H) C0:16MB,"
        DEFM "  D0: 16MB  E0: 16MB"
        DEFB 0DH,0AH
        DEFM "FDC (45H) B0:5*1024"
        DEFM " F0:16*256 G1:5*1024"
        DEFB 0DH,0AH,0DH,0AH
        DEFM "RFL Praeci.Port E0H"
        DEFM " A: 1024k -->"
        DEFM "Format A:(J)?"
        DEFB 0
;
;******************************   BOOT   *******************************
;
BOOT:   DI
        LD   SP,CPMSTK
        XOR  A
        LD   (LATPU),A    ;FDC-Latch zuruecksetzen
        LD   A,82H        ; Cursor EIN ?
        LD   (CUFLAG),A
        LD   A,20H        ; alternierendes Cursor-Zeichen
        LD   (CUALT),A
        CALL BWSINI
        IN   A,(P05)
        RES  3,A           ; BildInvers (PIO1B) Bit3 aus
        OUT  (P05),A
        LD   HL,(BREAK)    ; Sprungtabelle NMI MONOTOR
        LD   (OLDNMI),HL   ; sichern
        LD   HL,WBOOTB     ; CP/M-Warmstart-Einsprungadresse
        LD   (BREAK),HL
        CALL CPMMOD
        XOR  A
        LD   (DF51A),A
        LD   (IOBYTE),A
        LD   (LWBYTE),A
        LD   (ZEIPUF),A
        CALL BOOT1
;
        LD   A,03H         ; CTC init + INT-Mode 2
        OUT  (P00),A
        OUT  (P01),A
        OUT  (P02),A
        OUT  (P03),A
        LD   A,0FFH
        LD   I,A
        IM   2
        LD   HL,0F304H
        LD   (DFF80),HL
        LD   (DFF82),HL
        LD   (DFF84),HL
        LD   (DFF82),HL
        LD   HL,0F2EAH
        LD   (DFF86),HL
        LD   A,80H
        OUT  (P00),A
        LD   A,0FFH
        LD   (DF4F9),A
        LD   A,0A7H
        OUT  (P03),A
        XOR  A
        OUT  (P03),A
;
        LD   HL,0E9B2H
        LD   (DFF88),HL
        LD   HL,0EA05H
        LD   (DFF8A),HL
        LD   BC,0506H
        LD   HL,PIO1TAB
        OTIR               ; PIO1 PA Init
;
        LD   HL,TXT01      ; Begruessungstext
        CALL OUTTXT
        EI
        CALL CONIN
        RES  5,A          ;Grossbuchstaben
        CP   4AH          ;J --> RAM-Disk formatieren
        CALL Z,RDFORM
        JR   WBOOT1
;
;*******************************   WBOOT   *****************************
;
WBOOT:  LD   SP,CPMSTK
        CALL CPMMOD
        LD   A,(DF51B)
        OR   A
        CALL NZ,LF0CE
        LD   B,2CH        ;44 Records CCP+BDOS
        LD   HL,READ
        LD   (WRCCP2),HL
        CALL WRCCP        ; wirklich READCCP !
        LD   HL,WRITE
        LD   (WRCCP2),HL
;
WBOOT1: CALL BOOT1
        LD   A,01H
        LD   (CUFLAG),A
        LD   A,(COLO2)
        LD   (COLOR),A     ;Arbeitszelle Farbbyte
        AND  77H           ;Intensivdarstellung maskieren
        LD   (COLO1),A     ;Arbeitszelle "Normaldarstellung"
        LD   A,(LWBYTE)
        AND  1FH
        LD   C,A
        CALL SELDSK
        LD   HL,(CCP)
        JP   (HL)         ; JP CCP
;
;
CPMERR: PUSH AF           ; CP/M-Fehler - zurueck z. MONITOR
        PUSH HL
        CALL LE990
        RST  18H
        DEFM " CP"
        DEFB 4DH+80H      ;"M+80H
        POP  HL
        POP  AF
        CALL RSA
        POP  HL
        DEC  HL
        CALL OUTHL
        RST  18H
        DEFB 0DH+80H
        CALL REGIST       ; MONI - Registeranzeige - nicht MO11 !!!
        RST  38H          ; zurueck zum MONI
;
;
BOOT1:  LD   A,0C3H        ; CP/M "Grundseite" INIT
        LD   (WARMBT),A
        LD   (BDOSF),A
        LD   (RST38),A
        LD   (NMI),A
        LD   HL,WBOOTB
        LD   (WARMBT+1),HL
        LD   (NMI+1),HL
        LD   HL,BDOS
        LD   (BDOSF+1),HL
        LD   HL,CPMERR
        LD   (RST38+1),HL
        LD   HL,0080H
        LD   (DMA),HL
        RET
;
;+++++++++++++++++++++++++++++++++   Ende BOOT / WBOOT   +++++++++++++++++
;
CPMMOD: PUSH AF           ; CP/M EIN
        LD   A,01H
        JR   MOD1
;
AC1MOD: PUSH AF           ; CP/M AUS (AC1-Mode)
        XOR  A
MOD1:   OUT  (P1E),A
        POP  AF
        RET
;
CHKSU:  LD   BC,0FFFFH     ; Pruefsumme berechnen
CHKS1:  LD   A,(DE)
        XOR  B
        LD   B,A
        RRCA
        RRCA
        RRCA
        RRCA
        AND  0FH
        XOR  B
        LD   B,A
        RRCA
        RRCA
        RRCA
        PUSH AF
        AND  1FH
        XOR  C
        LD   C,A
        POP  AF
        PUSH AF
        RRCA
        AND  0F0H
        XOR  C
        LD   C,A
        POP  AF
        AND  0E0H
        XOR  B
        LD   B,C
        LD   C,A
        INC  DE
        DEC  HL
        LD   A,H
        OR   L
        JR   NZ,CHKS1
        RET
;
EXIT:   LD   HL,0000H      ; RuecksprungAdresse f. RET
        PUSH HL
LE990:  LD   A,00H         ; AC1-Mode
        OUT  (P1E),A
        XOR  A
        OUT  (P11),A       ; ? IOSEL4
        LD   HL,(OLDNMI)
        LD   (BREAK),HL    ; alten NMI wiederherstellen
        LD   A,03H
        OUT  (P00),A       ; INIT CTC
        OUT  (P01),A
        OUT  (P02),A
        OUT  (P03),A
        OUT  (P06),A       ; INIT PIO1 Port A (Tastatur) ohne INTERRUPT
        LD   A,0CFH
        OUT  (P06),A
        LD   A,0FFH
        OUT  (P06),A
        RET                ; zurueck zum MONITOR, normal
;
;
;Ansprung unklar
LE9B2:  DI
        PUSH AF
        PUSH BC
        PUSH HL
        IN   A,(P04)
        BIT  7,A
        JR   Z,LE9FF
        LD   C,A
        LD   B,1EH
LE9BF:  IN   A,(P04)
        CP   C
        JR   NZ,LE9FF
        DJNZ LE9BF
        CP   80H
        JR   NZ,LE9CA
LE9CA:  LD   HL,0EA18H
        LD   BC,0206H
        OTIR
        LD   C,A
        LD   HL,0FFD0H
        LD   A,(HL)
        INC  A
        CP   1FH
        JR   Z,LE9FF
        LD   (HL),A
        PUSH BC
        LD   C,A
        ADD  HL,BC
        POP  BC
        RES  7,C
        LD   (HL),C
        LD   BC,8034H
LE9E7:  LD   A,C
LE9E8:  DEC  A
        JR   NZ,LE9E8
        IN   A,(P05)
        XOR  01H
        OUT  (P05),A
        DJNZ LE9E7
        AND  0FEH
        OUT  (P05),A
        LD   BC,0200H
LE9FA:  DEC  BC
        LD   A,B
        OR   C
        JR   NZ,LE9FA
LE9FF:  POP  HL
        POP  BC
        POP  AF
        EI
        RETI
;
;Ansprung unklar      INIT PIO1 Port A fuer Interruptbetrieb
;
LEA05:  DI
        PUSH AF
        PUSH BC
        PUSH HL
        LD   HL,PIO1TAB
        LD   BC,0506H      ; 5 Bytes f. PIO1 A Control
        OTIR
        JR   LE9FF
;Ansprung unklar
PIO1TAB:  DEFB 88H,0CFH,0FFH,0B7H,7FH   ; Tabelle PIO1 Port A
;
        ADC  A,D
        ADD  A,A
;
;
OUTTXT: PUSH BC
        PUSH AF
TEXT1:  LD   C,(HL)
        LD   A,C
        OR   A
        JR   Z,TEXT2
        CALL CONOUT
        INC  HL
        JR   TEXT1
TEXT2:  POP  AF
        POP  BC
        RET
;
;Ansprung unklar
LEA2A:  XOR  A
        RET
;
;************************   CONST   *************************
;
CONST:  LD   A,(ZEIPUF)
        OR   A
        RET  Z
        LD   A,0FFH
        RET
;
;***************************   CONIN   ***********************
;
CONIN:  DI
        LD   (SPCIN),SP
        LD   SP,CINSP
        PUSH BC
        PUSH DE
        PUSH HL
CON10:  XOR  A
        DI
        LD   HL,(ZEIPUF)
        OR   L
        JR   NZ,CON12
        EI
        DJNZ CON10
        DI
        OUT  (P1E),A         ; AC1 Mode
        LD   HL,(CUPOS)
        INC  C
        BIT  6,C
        LD   A,(CUALT)
        JR   Z,CON11
        LD   A,0FH
CON11:  LD   (HL),A
        CALL CPMMOD           ; CP/M Mode
        JR   CON10
CON12:  DEC  A
        LD   (ZEIPUF),A
        LD   A,H
        LD   HL,0FFD2H
        LD   DE,0FFD1H
        LD   BC,001FH
        LDIR
        CALL CON20
        POP  HL
        POP  DE
        POP  BC
        LD   SP,(SPCIN)
        EI
        RET
;
CON20:  CP   41H
        RET  C
        RET  NC
        CP   5FH
        JR   Z,CON21
        RET
;Ansprung unklar
LEA85:  CP   5EH
        JR   C,CON21
        CP   61H
        RET  C
        CP   7EH
        RET  NC
CON21:  XOR  20H
        RET
;
;********************   LIST   PUNCH   (READER)   ***********
;
LIST:   RET
;
PUNCH:  RET
;
;******************************* CONOUT  *********************
;
;       ; Ausgabe eines Zeichens  ,   IN: Zeichen in C
;
CONOUT: DI
        LD   (SPCOUT),SP     ; Stack bei MON-Aufruf retten
        LD   SP,COUTSP
        PUSH AF
        PUSH BC
        PUSH DE
        PUSH HL
        CALL AC1MOD
        PUSH HL
        LD   HL,(CUPOS)      ;Cursorposition
        LD   A,(CHAR)
        LD   (HL),A          ;altes Zeichen auf Position
        LD   A,(STZ00)       ;Durchlauf bei Steuerzeichen?
        AND  A
        JP   NZ,KONV10       ;NZ= Steuerzeichen 2. oder 3. Durchlauf
        LD   A,C             ;Byte
        CP   20H             ;kleinstes Zeichen
        JR   C,KONVTB
        CP   7FH             ;groesstes Zeichen
        JR   NC,KONVTB
        LD   HL,(CUPOS)
        JP   CCHAR          ;Ausgabe einzelnes Zeichen
;
KONVT9: LD   HL,(CUPOS)
        LD   A,(HL)
        LD   (CHAR),A
        LD   A,(CUFLAG)
        CP   01H
        JR   NZ,LEAD1
        LD   (HL),0FH
LEAD1:  CALL CPMMOD
        POP  HL
        POP  DE
        POP  BC
        POP  AF
        LD   SP,(SPCOUT)
        EI
        RET
;
;       ; Verzweigung bei Steuerzeichen
;       ; INPUT:  A=Zeichen
;
KONVTB: CP   1BH            ; ESC ?
        JR   NZ,KONVT1
        LD   A,02H          ;wenn ja
        LD   (STZ00),A      ;Zeiger auf 2
        JR   KONVT9         ;nichts ausgeben
;
KONVT1: LD   HL,(CUPOS)
        CP   01H            ;Cursor home
        JR   Z,CHOME
        CP   08H            ;Cursor links
        JP   Z,CLEFT
        CP   0AH            ;Zeilenvorschub
        JP   Z,CLF
        CP   0CH            ; CLS
        JR   Z,BCLS
        CP   0DH            ;Wagenruecklauf
        JP   Z,CCRET
        CP   14H            ;BS ab Cursor loeschen
        JP   Z,CBLOE
        CP   15H            ;Cursor nach rechts
        JP   Z,CRIGH
        CP   16H            ;Zeile ab Cursor loeschen
        JP   Z,CZLOE
        CP   18H            ;Zeile ab Cursor loeschen + CR
        JP   Z,CZLCR
        CP   1AH            ;Cursor hoch
        JP   Z,CHOCH
        LD   B,A            ;Zeichen merken
        LD   A,(COLOR)
        AND  A              ;Test auf Color-BWS
        JP   Z,KONVT9       ;Z = monochrom
        LD   A,B
        CP   02H
        JP   Z,CUON
        CP   82H
        JP   Z,CUON
        CP   03H
        JP   Z,CUOFF
        CP   83H
        JP   Z,CUOFF
        CP   84H            ;normale Darstellung
        JP   Z,BNORM
        CP   85H            ;invers
        JP   Z,BINVN
        CP   86H            ;intensiv - HihgLight
        JP   Z,BINTE
        CP   87H            ;intensiv + invers
        JP   Z,BIVIN
        JP   KONVT9
;
CHOME:  LD   HL,17FFH
        LD   (CUPOS),HL
        JP   KONVT9
;
BCLS:   LD   A,20H          ;0Ch    Bildschirm loeschen
        CALL BCL1           ;Loeschroutine
        LD   (CUPOS),HL     ;Cursorposition
        LD   A,(COLOR)      ;Farbbyte
        AND  77H            ;Farb-BWS vorhanden?
        JP   Z,KONVT9       ;Z = nein, dann Ende
        CALL BWSCOL         ;Farbspeicher ein
        LD   A,(COLOR)
        CALL BCL1
        CALL BWSZEI         ;Farbspeicher aus
        JP   KONVT9
;
CLEFT:  INC  HL             ;08h     Cursor links
        JP   CHOLI
;
CLF:    LD   DE,0040H       ;0Ah     Zeilenvorschub
        AND  A
        SBC  HL,DE
        JP   SCROL
;
BCL1:   LD   HL,1000H       ;Anfang BWS
        LD   (HL),A
        LD   D,H
        LD   E,L
        INC  E
        PUSH BC
        LD   BC,07FFH       ;Laenge BWS
        LDIR
        POP  BC
        RET
;
CCRET:  LD   A,L            ;0Dh     Wagenruecklauf
        OR   3FH
        LD   L,A
        JP   SCROL
;
CBLOE:  PUSH HL
        LD   A,0FH          ;14h     BS ab Cursor loeschen
CBLO1:  LD   (HL),20H
        DEC  HL
        CP   H
        JR   NZ,CBLO1
        POP  HL
        LD   A,(COLOR)
        LD   B,A
        AND  77H
        JP   Z,KONVT9
        CALL BWSCOL          ;Farbspeicher ein
        LD   A,0FH
CBLO2:  LD   (HL),B
        DEC  HL
        CP   H
        JR   NZ,CBLO2
        CALL BWSZEI          ;Farbspeicher aus
        JP   KONVT9
;
CRIGH:  DEC  HL              ;15h     Cursor nach rechts
        JP   SCROL
;
CZLOE:  PUSH HL              ;16h   Zeile ab Cursor loeschen
        LD   A,L
        AND  3FH
        LD   B,A
        INC  B
CZLO1:  LD   (HL),20H
        DEC  HL
        DJNZ CZLO1
        POP  HL
        LD   A,(COLOR)
        LD   C,A
        AND  77H
        JP   Z,KONVT9
        CALL BWSCOL          ;Farbspeicher ein
        LD   A,L
        AND  3FH
        LD   B,A
        INC  B
CZLO2:  LD   (HL),C
        DEC  HL
        DJNZ CZLO2
        CALL BWSZEI          ;Farbspeicher aus
        JP   KONVT9
;
CZLCR:  PUSH HL              ;18h   Zeile ab Cursor loeschen + CR
        LD   A,L
        OR   3FH
        LD   L,A
        LD   (CUPOS),HL
        PUSH HL
        LD   B,40H           ;Zeilenlaenge
CZLC1:  LD   (HL),20H
        DEC  HL
        DJNZ CZLC1
        POP  HL
        LD   A,(COLOR)
        LD   C,A
        AND  77H
        JP   Z,KONVT9
        CALL BWSCOL          ;Farbspeicher ein
        LD   B,40H
CZLC2:  LD   (HL),C
        DEC  HL
        DJNZ CZLC2
        CALL BWSZEI          ;Farbspeicher aus
        JP   KONVT9
;
CHOCH:  LD   DE,0040H        ;1Ah     Cursor hoch
        ADD  HL,DE
;
CHOLI:  LD   A,18H           ;Begrenzung Cursor hoch und links
        CP   H
        JP   Z,KONVT9
        LD   (CUPOS),HL
        JP   KONVT9
;
CCHAR:  LD   (HL),A
        LD   A,(COLOR)
        LD   C,A
        AND  77H
        JR   Z,CCHA1
        CALL BWSCOL
        LD   (HL),C
        CALL BWSZEI
CCHA1:  DEC  HL
;
SCROL:  LD   (CUPOS),HL
        EX   DE,HL             ;Test ob Scrollen noetig
        LD   HL,0FFFH
        AND  A
        SBC  HL,DE             ;DE = akt. Cursorpos.
        EX   DE,HL
        JP   C,KONVT9          ;CY = nicht scrollen
        LD   A,20H             ;Leerzeichen
        CALL SCR11             ;Scrollen
        LD   A,(COLOR)
        AND  77H
        JP   Z,KONVT9          ;Z = kein Farbspeicher
        CALL BWSCOL            ;Farbspeicher ein
        LD   A,(COLOR)         ;Farbbyte
        CALL SCR11
        CALL BWSZEI            ;Farbspeicher aus
        JP   KONVT9
;
SCR11:  LD   HL,17BFH          ;Umladeroutine Scrollen
        LD   DE,17FFH
        LD   BC,07C0H
        LDDR
        EX   DE,HL
        LD   (CUPOS),HL
        INC  HL
        LD   B,40H             ;eine Zeilenlaenge
SCR12:  DEC  L
        LD   (HL),A            ;Leerzeile schreiben
        DJNZ SCR12
        RET
;
BNORM:  LD   A,(COLO1)         ;84h    normale Darstellung
        AND  77H
        LD   (COLOR),A
        LD   (COLO1),A
        JP   KONVT9
;
BINVN:  LD   A,(COLO1)         ;85    invers EIN
        AND  77H
        RRCA
        RRCA
        RRCA
        RRCA
        LD   (COLOR),A
        JP   KONVT9
;
BINTE:  LD   A,(COLO1)         ;86h    intensiv EIN
        AND  77H
        OR   08H
        LD   (COLOR),A
        JP   KONVT9
;
BIVIN:  LD   A,(COLOR)         ;87h    intensiv + invers
        AND  77H
        OR   08H
        RRCA
        RRCA
        RRCA
        RRCA
        LD   (COLOR),A
        JP   KONVT9
;
CUON:   LD   A,01H              ;82h   Cursor EIN
        LD   (CUFLAG),A
        JP   KONVT9
;
CUOFF:  XOR  A                  ;83h  Cursor AUS
        LD   (CUFLAG),A
        JP   KONVT9
;
; Behandlung ESC-Sequenzen
;
; Input: ESC + 2 Steuerzeichen
; wenn 1. Zeichen > 80h dann Cursorposition
; sonst Auswertung Farbe / Grafikzeichen
; (stz00) = Zaehler fuer Zeichenanzahl
;
KONV10: LD   A,(STZ00)
        CP   02H             ;2 = 1. Steuerzeichen (Zeile)
        JR   NZ,KONV20       ;sonst 3. Durchlauf (Spalte)
        LD   A,C
        LD   (STZ01),A       ;erstes Zeichen merken
        LD   A,01H           ;Zeiger fuer 3. Durchlauf
        LD   (STZ00),A
        JP   KONVT9          ;nichts ausgeben
;
; Verzweigung Cursorposition / weitere Funktionen
;
KONV20: LD   A,C
        LD   (STZ02),A       ;zweites Zeichen merken
        XOR  A
        LD   (STZ00),A       ;Durchlaufzaehler ruecksetzen
        LD   HL,STZ01
        LD   A,(HL)
        BIT  7,A             ;welche Funktion? NZ = Cursor
        JR   Z,KONV22        ;Z = weitere Funktionen

; Berechnung direkte Cursorposition
; OUT:    HL = BWS-Adresse
;
        PUSH AF
        LD   A,C
        AND  3FH             ;max. Spaltenzahl
        LD   L,A
        POP  AF
        AND  1FH             ;max. Zeilenzahl
        LD   D,00H
        LD   H,D
        LD   E,A
        LD   B,06H
KONV21: SLA  E
        RL   D
        DJNZ KONV21
        ADD  HL,DE
        EX   DE,HL
        LD   HL,17FFH         ;Ende BWS-RAM
        AND  A
        SBC  HL,DE
;
; Cursor direkt positionieren
; IN:    HL = Adresse Cursor
;
        PUSH HL
        LD   HL,(CUPOS)	      ;alte Position
        LD   A,(CHAR)	      ;Zeichen holen
        LD   (HL),A	      ;auf BS schreiben
        POP  HL
        LD   (CUPOS),HL       ;neue Position setzen
        LD   A,(HL)           ;neues Zeichen holen
        LD   (CHAR),A         ;und merken
        JP   KONVT9
;
; Auswertung weiterer ESC-Funktionen
; IN:      A = 1. Steuerzeichen
;
; Ausgabe Grafikzeichen aus AC1-ZG ( > 80h )
;
KONV22: CP   5FH               ;Grafikzeichen?
        JR   NZ,KONV24         ;NZ = nein
        INC  HL
        LD   A,(HL)            ;2. Zeichen holen
        LD   HL,(CUPOS)
        JP   CCHAR             ;Zeichen ausgeben
;
; Einstellen der Farbe (nur Color-BWS)
;
KONV24: CP   5DH               ;Farbe?
        JP   NZ,KONVT9         ;NZ = nein
        LD   A,(COLOR)         ;Color-BWS?
        AND  A
        JP   Z,KONVT9          ;Z = nein
        INC  HL
        LD   A,(HL)            ;2. Zeichen holen
        AND  77H               ;intensiv maskieren
        LD   B,A
        RRCA
        RRCA
        RRCA
        RRCA
        CP   B                 ;Zeichen- und HG-Farbe gleich?
        JP   Z,KONVT9          ;Z = Ja, dann ignorieren
        LD   A,B
        LD   (COLOR),A         ;Farbe setzen
        AND  77H               ;intensiv maskieren
        LD   (COLO1),A         ;Backup
        JP   KONVT9
;
BWSCOL: IN   A,(PF0)           ; bwsport
        SET  2,A               ;Farbspeicher ein
        JR   BWSZ1
;
BWSZEI: IN   A,(PF0)           ; bwsport
        RES  2,A               ;Farbspeicher aus
BWSZ1:  AND  07H
        OUT  (PF0),A
        RET
;
BWSINI: XOR  A
        LD   (COLO2),A
        LD   A,(CBWSB)       ; Farbmerkzelle, 0= mono
        AND  0FH
        LD   C,0F0H          ; C-BWS-Port
        IN   B,(C)
        INC  B
        RET  Z               ; Z = kein Color-BWS
        DEC  B
        LD   D,B
        SET  2,D              ; Farb-RAM-Bit setzen
        LD   HL,1000H
        LD   E,(HL)        ; Zeichen aus unt.-li. Ecke
        OUT  (C),D         ; Farb-RAM einschalten
        LD   (HL),A
        CP   (HL)          ; ist Farb-RAM eingebaut?
        OUT  (C),B         ; Farb-RAM ausschalten
        LD   (HL),E
        RET  NZ            ; Z = Farb-RAM ok
        OUT  (C),D         ; Farb-RAM einschalten
        PUSH BC
        LD   DE,1001H
        LD   BC,07FFH
        LDIR               ; Farb-RAM loeschen
        LD   A,(HL)
        POP  BC
        OUT  (C),B         ; Farb-RAM ausschalten
        LD   (COLO2),A
        RET
;
;+++++++++++++++++++++++++++++   Ende CONOUT  ++++++++++++++++
;
;Ansprung unklar
LED82:  XOR  A
        DEC  A
        RET
;
LISTST: XOR  A
        DEC  A
        RET
;
SELDSK: LD   HL,NDISK     ;Anzahl der LW
        LD   A,C          ;C = akt. LW
        CP   (HL)
        LD   HL,0000H     ;HL=0 --> kein LW
        RET  NC           ;akt. LW >= NDISK!!!
        LD   HL,(DPHX)
        LD   B,00H
        ADD  HL,BC
        ADD  HL,BC        ;DPHX + (2 * LW)
        LD   E,(HL)
        INC  HL
        LD   D,(HL)
        EX   DE,HL
        LD   A,H
        OR   L
        RET  Z            ;HL=0 --> kein DPB
        LD   A,C
        LD   (DRIVE),A    ;aktives LW --> A
        LD   (DPH),HL     ;zugeordneter DPH --> HL
        RET
;
HOME:   LD   BC,0000H
SETTRK: LD   (TRACK),BC
        RET
;
SETSEC: LD   (SECTOR),BC
        RET
;
SETDMA: LD   (DMA),BC
        RET
;
SECTRN: LD   H,B
        LD   L,C
        LD   A,D
        OR   E
        RET  Z
        EX   DE,HL
        LD   B,00H
        ADD  HL,BC
        LD   L,(HL)
        LD   H,D
        RET
;
READ:   LD   C,02H
        LD   A,04H
        DEFB 21H          ;LD HL,063EH mit nxt. Befehl!!!
WRITE:  LD   A,06H
        LD   (DF4FB),A    ;hier geht es fuer READ weiter!
        LD   A,C
        LD   (DF51E),A
        LD   HL,LEDEC
        PUSH HL
        LD   HL,(DPH)
        LD   DE,000AH
        ADD  HL,DE
        LD   A,(HL)
        INC  HL
        LD   H,(HL)
        LD   L,A
        DEC  HL
        LD   A,(HL)
        DEC  HL
        LD   L,(HL)
        LD   H,A
        PUSH HL
        LD   HL,0F4FBH
        RET
;
LEDEC:  OR   A
        RET  Z
        LD   A,01H
        RET
;
LEDF1:  LD   C,(HL)
        INC  HL
        INC  HL
        LD   A,(HL)
        LD   (RAFTRK),A
        INC  HL
        LD   A,(HL)
        AND  A
        JR   NZ,RDERR
        INC  HL
        LD   A,(HL)
        LD   (RAFSEC),A
        BIT  7,A
        JR   NZ,RDERR
        INC  HL
        LD   A,(HL)
        AND  A
        JR   NZ,RDERR
        INC  HL
        INC  HL
        LD   A,C
        LD   BC,0080H
        CP   06H
        JR   Z,LEE1D
        CALL ADRRAF
        INIR
        NOP
        XOR  A            ; in Ordnung
        RET
;
LEE1D:  LD   HL,0080H
        LD   DE,(DMA)
        CALL CHKSU
        LD   (CHKSUM),BC
        CALL ADRRAF
        OTIR
        NOP
        CALL ADRRAF
        INIR
        NOP
        LD   HL,0080H
        LD   DE,(DMA)
        CALL CHKSU
        LD   HL,(CHKSUM)
        SBC  HL,BC
        JR   NZ,RDERR
        XOR  A            ; in Ordnung
        RET
;
RDERR:  LD   A,0FFH       ; Fehler
        RET
;
TXTINI: DEFM " =>INIT.."
        DEFB 0
;
TEXTOK: DEFM "OK"
        DEFB 0
;
RFLERR: DEFM "RFL ERROR!"
        DEFB 0
;
RDFORM: LD   HL,TXTINI
        CALL OUTTXT
        LD   HL,0B002H    ;Hilfsprogramm von 0B000H bis 0B800H
        LD   D,H
        LD   E,L
        DEC  HL
        LD   (HL),0E0H    ;0B001H = 0E0H
        DEC  HL
        LD   (HL),0D3H    ;0B000H = 0D3H
        LD   BC,0200H
        LDIR              ;0D3H,0E0H von 0B000H bis 0B1FFH
        INC  HL
        LD   (HL),0E1H
        DEC  HL
        LD   BC,0200H
        LDIR              ;0D3H,0E1H von 0B200H bis 0B3FFH
        INC  HL
        LD   (HL),0E2H
        DEC  HL
        LD   BC,0200H
        LDIR              ;0D3H,0E2H von 0B400H bis 0B5FFH
        INC  HL
        LD   (HL),0E3H
        DEC  HL
        LD   BC,0200H
        LDIR              ;0D3H,0E3H von 0B600H bis 0B7FFH
        LD   (HL),0C9H    ;RET auf 0B800H
        XOR  A
        OUT  (PE7),A      ;L-Adresse
        OUT  (PE6),A      ;H-Adresse
        OUT  (PE5),A      ;Extended-Adresse
        LD   B,A
        LD   A,0E5H       ;RD wird mit 0E5H formatiert
        LD   C,0E6H
RDFOR1: CALL HPRDSK       ;Hilfsprogramm Format RAM-Disk
        OUT  (C),B
        DJNZ RDFOR1       ;fuer alls H-Adressen (256 Durchl.)
        LD   HL,EQUCCP
        LD   (DMA),HL
        LD   B,2CH        ;44 Bloecke CCP+BDOS
        CALL WRCCP
        JP   NZ,CPMERR
        LD   HL,TEXTOK
        CALL OUTTXT
        RET
;
WRCCP:  PUSH BC           ;CCP+BDOS in Systemtrack schreiben
        LD   C,00H        ;LW A:
        CALL SELDSK
        POP  BC
        LD   HL,0000H
        LD   (TRACK),HL   ;Track 0
        EX   DE,HL
        LD   HL,(CCP)
WRCCP1: LD   (SECTOR),DE
        LD   (DMA),HL
        PUSH BC
        DEFB 0CDH         ;CALL WRITE -> CD ED CA
WRCCP2: DEFW 0EDCAH       ; kannn durch     READ (EDC5) ersetzt werden
        POP  BC
        JR   NZ,RDERRO
        LD   HL,(DMA)
        LD   DE,0080H
        ADD  HL,DE
        LD   DE,(SECTOR)
        INC  DE
        DJNZ WRCCP1
        XOR  A
        RET
;
RDERRO: LD   HL,RFLERR
        CALL OUTTXT
        XOR  A
        DEC  A
        RET
;
ADRRAF: XOR  A            ;L=RADR 0-7 , H=RADR 8-15 , A=RADR 16-19(21)
        LD   L,A
        LD   A,(RAFSEC)   ;(RAFSEC)
        LD   H,A          ;H=Record (max. 128 = Bit 0-6)
        RR   H
        RR   L            ;H0 -> L7 ...... H6 -> H5
        LD   A,(RAFTRK)    ;(RAFTRK) , A=Track (max. 64 bei 1M (256 bei 4M) = Bit 0-5(7)
        RR   A            ;A0 -> CY
        JR   NC,LEF0B
        SET  6,H          ;H6 = A0 (RADR14)
LEF0B:  RR   A            ;A1 -> CY
        JR   NC,LEF11
        SET  7,H          ;H7 = A1 (RADR15)
LEF11:  PUSH AF
        AND  03H
        OR   0E0H
        LD   C,A
        LD   A,L
        OUT  (PE7),A      ;L-Adresse
        LD   A,H
        OUT  (PE6),A      ;H-Adresse
        POP  AF
        RR   A            ;Rotiere A rechts durch Carry
        RR   A
        AND  0FH
        OUT  (PE5),A      ;Extended-Adresse
        LD   B,80H
        LD   HL,(DMA)
        RET
;
;-------------------  ist evtl. altes Fragment von LOAD ---------
;
TRTXT:  DEFM " OK TPA von 2000H nach "
        DEFM "0100H umgeladen!"
        DEFB 0
        
        LD   HL,2000H     ; Quelle
        LD   DE,0100H     ; ZielAdresse
        LD   BC,0B000H    ; Laenge (maximum)
        LDIR
;
        LD   HL,TRTXT
        CALL OUTTXT
        RET
;
;*************************  LOAD (Turbo)  ********************
;
LOAD:   DI
        LD   (SPLOAD),SP
LEF6B:  LD   SP,LOADSP
        PUSH AF
        PUSH BC
        PUSH DE
        PUSH HL
        XOR  A
        OUT  (P1E),A        ; AC1-Mode
        LD   DE,0FFFH
        RST  18H
        DEFB 0DH+80H        ; CR ausgeben
        LD   A,20H
        LD   (CUALT),A
        LD   HL,2000H       ; Lade-Ziel-Adresse
        LD   (ARG1),HL      ; nach Arg1
        CALL KLOAD          ; Load From Kassette - Nicht MO11!!
        LD   DE,(ARG1)      ; Anfang
        LD   HL,(ARG2)      ; Ende
        PUSH DE
        AND  A
        SBC  HL,DE
        PUSH HL
        LD   A,L
        LD   L,00H
        AND  A
        JR   Z,LEF9B
        INC  H
LEF9B:  XOR  A
LEF9C:  ADD  A,01H
        DAA
        JR   NC,LEFA2
        INC  L
LEFA2:  DEC  H
        JR   NZ,LEF9C
        LD   H,L
        LD   L,A
        RST  18H
        DEFM "Anzahl 100H Bloe"
        DEFM "cke:"
        DEFB 20H+80H      ;" +80H
        CALL CPMMOD
        LD   A,H
        CALL BCDKO
        LD   A,L
        CALL BCDKO
        POP  BC
        LD   DE,0100H     ; ZielAdresse
        POP  HL           ; verschieben von #2000
        LDIR              ; nach #0100 f. CP/M
        POP  HL
        POP  DE
        POP  BC
        POP  AF
        LD   SP,(SPLOAD)
        EI
        RET
;
BCDKO:  PUSH AF
        RRA
        RRA
        RRA
        RRA
        CALL BCDK1
        POP  AF
BCDK1:  AND  0FH
        ADD  A,90H
        DAA
        ADC  A,40H
        DAA
        JP   OUTA
;
OUTA:   PUSH HL        ; Ausgabe Zeichen aus Akku
        PUSH DE
        PUSH BC
        LD   E,A       ; ASCII-Zeichen nach E
        LD   C,02H     ; BDOS-FKT.-Nr. 2 (CONSOLEN-Ausgabe)
        CALL BDOSF     ; BDOS Aufruf
        POP  BC
        POP  DE
        POP  HL
        RET
;
;******************************   Ende LOAD  *****************
;
LEFFA:  LD   HL,(DPH)
        LD   (DF515),HL
LF000:  LD   L,0FH
LF002:  PUSH DE
        LD   DE,000AH
        LD   H,D
        PUSH HL
        LD   HL,(DF515)
        ADD  HL,DE
        LD   E,(HL)
        INC  HL
        LD   D,(HL)
        POP  HL
        ADD  HL,DE
        POP  DE
        LD   A,(HL)
        OR   A
        RET
;Ansprung unklar
LF015:  INC  HL
        SET  7,(HL)
        DEC  HL
LF019:  XOR  A
        LD   (DF51C),A
        CALL LF024
        LD   A,(DF51C)
        RET
;
LF024:  LD   C,(HL)
        CALL LEFFA
        JP   Z,LF0E1
        LD   A,C
        CP   06H
        LD   A,01H
        JR   NZ,LF033
        XOR  A
LF033:  LD   (DF51D),A
        CALL LF000
        LD   B,A
        LD   HL,(SECTOR)
LF03D:  SRL  H
        RR   L
        DJNZ LF03D
        LD   (DF518),HL
        LD   HL,0F51AH
        LD   A,(HL)
        LD   (HL),01H
        OR   A
        JR   Z,LF075
        LD   A,(DRIVE)
        LD   HL,0F505H
        CP   (HL)
        JR   NZ,LF06E
        LD   HL,(DF506)
        LD   DE,(TRACK)
        SBC  HL,DE
        JR   NZ,LF06E
        LD   HL,(DF508)
        LD   DE,(DF518)
        SBC  HL,DE
        JR   Z,LF08D
LF06E:  LD   A,(DF51B)
        OR   A
        CALL NZ,LF0CE
LF075:  LD   HL,DRIVE
        LD   DE,0F505H
        LD   BC,0009H
        LDIR
        LD   HL,(DF518)
        LD   (DF508),HL
        CALL LF0D1
        XOR  A
        LD   (DF51B),A
LF08D:  CALL LF000
        INC  HL
        LD   A,(SECTOR)
        AND  (HL)
        RRA
        LD   H,A
        LD   A,00H
        RRA
        LD   L,A
        LD   DE,0F51FH
        ADD  HL,DE
        LD   DE,(DMA)
        LD   A,(DF51D)
        OR   A
        JR   NZ,LF0AE
        INC  A
        LD   (DF51B),A
        EX   DE,HL
LF0AE:  LD   BC,0080H
        LDIR
        LD   A,(DF51C)
        OR   A
        JR   NZ,LF0C9
        LD   A,(DF51E)
        DEC  A
        RET  NZ
        LD   (DF51B),A
        CALL LF0CE
        LD   A,(DF51C)
        OR   A
        RET  Z
LF0C9:  XOR  A
        LD   (DF51A),A
        RET
;
LF0CE:  LD   A,06H
        DEFB 21H             ; LD   HL,043EH  -> 21 3E 04
LF0D1:  LD   A,04H  
        LD   (DF517),A
        LD   HL,0F51FH
        LD   (DF50A),HL
        LD   HL,0F505H
        JR   LF0EA
;
LF0E1:  LD   A,(DF4FB)
        LD   (DF517),A
        LD   HL,DRIVE
LF0EA:  LD   DE,0F50EH
        LD   BC,0009H
        LDIR
        LD   A,(DF50E)
        RLA
        JP   C,LF307
        LD   A,(DF510)
        LD   HL,0F512H
        OR   (HL)
        JP   NZ,LF1C1
        CALL LF000
        LD   (DF4E8),A
        OR   A
        LD   A,0FFH
        JR   Z,LF110
        LD   A,80H
LF110:  LD   (DF4EB),A
        INC  HL
        INC  HL
        LD   A,(HL)
        LD   (DF4E9),A
        LD   A,(DF511)
        CP   (HL)
        JR   C,LF123
        SUB  (HL)
        LD   BC,0104H
LF123:  INC  A
        LD   (DF4E7),A
        INC  HL
        LD   A,(HL)
        LD   (DF4EA),A
        INC  HL
        LD   A,(DF50F)
        CP   (HL)
        JR   C,LF137
        SUB  (HL)
        LD   BC,0104H
LF137:  LD   (DF4E5),A
        INC  HL
        LD   A,(HL)
        OR   C
        LD   (DF4E4),A
        LD   A,B
        LD   (DF4E6),A
        INC  HL
        LD   A,(DF517)
        LD   D,05H
        CP   06H
        JR   Z,LF150
        LD   D,06H
LF150:  LD   A,(HL)
        AND  40H
        OR   D
        LD   (DF4E2),A
        LD   DE,0F4ECH
        LD   BC,0004H
        LDIR
        LD   C,02H
LF161:  LD   B,02H
LF163:  PUSH BC
        CALL LF175
        POP  BC
        OR   A
        RET  Z
        DJNZ LF163
        DEC  C
        RET  Z
        PUSH BC
        CALL LF1D5
        POP  BC
        JR   LF161
;
LF175:  LD   A,03H
        LD   B,02H
        LD   HL,CTAB      ;FDC Befehlsbyte
        OUT  (DFDC),A     ;Datenport FDC
        CALL LF230
        CALL LF1E7
        JR   NZ,LF1C1
        LD   HL,0040H
        LD   A,(DF4E8)
        INC  A
LF18D:  ADD  HL,HL
        DEC  A
        JR   NZ,LF18D
        DEC  HL
        INC  H
        INC  L
        PUSH HL
        LD   HL,(DF513)
        PUSH HL
        LD   A,(DF4E2)
        LD   C,A
        LD   B,09H
        RRCA
        LD   A,51H
        ADC  A,A
        LD   (MODE0),A    ;A2 --> INI
        LD   (MODE1),A    ;A3 --> OUTI
        DI
        CALL LF227
        POP  HL
        POP  DE
        LD   B,E
        LD   C,DFDC       ;Datenport FDC
        CALL RW           ;FDC RW-Routine
        EI
        CALL LF1C8
        LD   HL,0F4F0H
        LD   A,(HL)
        AND  0C0H
        JR   Z,LF1C3
LF1C1:  LD   A,0FFH
LF1C3:  LD   (DF51C),A
        OR   A
        RET
;
LF1C8:  LD   B,07H
        LD   HL,0F4F0H
LF1CD:  CALL LF24B
        LD   (HL),A
        INC  HL
        DJNZ LF1CD
        RET
;
LF1D5:  LD   BC,0207H
        CALL LF227
        CALL LF207
        RET  Z
        LD   BC,0207H
        CALL LF227
        JR   LF207
;
LF1E7:  LD   A,(DF4E5)
        LD   (DF4F7),A
        OR   A
        JR   Z,LF1D5
        LD   BC,030FH
        LD   HL,0F4ECH
        BIT  4,(HL)
        JR   Z,LF1FE
        ADD  A,A
        LD   (DF4E5),A
LF1FE:  CALL LF227
        LD   A,(DF4F7)
        LD   (DF4E5),A
LF207:  LD   BC,0108H
        CALL LF227
        CALL LF24B
        LD   B,A
        LD   (DF4F0),A
        CP   80H
        CALL NZ,LF24B
        BIT  5,B
        JR   Z,LF207
        LD   A,B
        AND  0F0H
        CP   0C0H
        JR   Z,LF207
        XOR  20H
        RET
;
LF227:  PUSH BC
        CALL LF285
        POP  BC
LF22C:  LD   HL,0F4E3H
        LD   (HL),C
LF230:  LD   C,41H
        PUSH DE
LF233:  LD   DE,1FFFH
LF236:  LD   A,E
        OR   D
        JR   Z,LF247      ;Abbruch nach 8192 Versuchen
        IN   A,(CFDC)     ;Lese Hauptstatusregister
        AND  0C0H
        CP   80H          ;FDC bereit zum Schreiben?
        DEC  DE
        JR   NZ,LF236     ;noch nicht bereit
        OUTI              ;1 Byte --> FDC
        JR   NZ,LF233     ;Wdhlg., bis B=0
LF247:  LD   B,00H
        POP  DE
        RET
;
LF24B:  PUSH HL
        LD   HL,1FFFH
LF24F:  LD   A,L
        OR   H
        LD   A,0C0H
        JR   Z,LF260      ;Abbruch nach 8192 Versuchen
        IN   A,(CFDC)     ;Lese Hauptstatusregister
        AND  0C0H
        CP   0C0H         ;FDC bereit zum Lesen?
        DEC  HL
        JR   NZ,LF24F     ;noch nicht bereit
        IN   A,(DFDC)     ;1 Byte vom FDC lesen --> A
LF260:  POP  HL
        RET
;
;
;       FDC READ/WRITE Routine
;       ----------------------
;
RW:     LD   A,(LATPU)
        SET  1,A
        OUT  (LATCH),A    ;WAIT-Freigabe
RW01:   IN   A,(CFDC)     ;Lese Hauptstatusregister
        RLCA
        JR   NC,RW01      ;FDC noch nicht bereit
        DEFB 0EDH         ;ED A2 = INI
MODE0:  DEFB 0A2H         ;ED A3 = OUTI
        NOP
RW02:   OUT  (WAIT),A     ;WAIT bis Interrupt FDC
        NOP
        DEFB 0EDH         ;ED A2 = INI
MODE1:  DEFB 0A2H         ;ED A3 = OUTI
        JP   NZ,RW02
        DEC  D
        JP   NZ,RW02
        LD   A,(LATPU)
        SET  4,A          ;Terminal Count
        OUT  (LATCH),A    ;TC + WAIT-Sperrung
        RET
;
LF285:  LD   HL,DF4F8
        LD   A,(DF4E4)
        AND  03H
        CP   (HL)
        LD   (HL),A
        INC  HL
        LD   C,(HL)
        LD   (HL),48H
        PUSH AF
        PUSH HL
        LD   HL,LATPU
        LD   A,(DF4E4)
        AND  03H
        JR   Z,LF2A7
        CP   02H
        JR   Z,LF2A7
        SET  3,(HL)       ;Floppy-LW 1: Motor an
        JR   LF2A9
;
LF2A7:  SET  0,(HL)       ;Floppy-LW 0: Motor an
LF2A9:  LD   A,(HL)
        OUT  (LATCH),A
        POP  HL
        POP  AF
        JR   NZ,LF2B4
        LD   A,C
        AND  A
        JR   NZ,LF2BD
LF2B4:  LD   A,48H
        SRL  A
        SRL  A
        CP   (HL)
        JR   C,LF2B4
LF2BD:  LD   A,(HL)
        AND  A
        JR   NZ,LF2C9
        PUSH HL
        LD   HL,DISCTX
        CALL OUTTXT
        POP  HL
LF2C9:  PUSH BC
        PUSH HL
        LD   BC,0204H
        CALL LF22C
        CALL LF24B
        POP  HL
        POP  BC
        BIT  5,A
        JR   Z,LF2BD
        LD   (HL),90H
        RET
;
DISCTX: DEFM ' DISC?'
        DEFB 8,8,8,8,8,8
        NOP
;
        PUSH AF
        LD   A,(DF4F9)
        AND  A
        JR   Z,LF303
        DEC  A
        LD   (DF4F9),A
        JR   NZ,LF303
        PUSH HL
        LD   HL,LATPU
        RES  0,(HL)       ;Floppy-LW 0: Motor aus
        RES  3,(HL)       ;Floppy-LW 1: Motor aus
        LD   A,(HL)
        OUT  (LATCH),A
        POP  HL
LF303:  POP  AF
        EI
        RETI
;
LF307:  IN   A,(P8F)
        RLA
        JR   C,LF307
        LD   L,19H
        CALL LF002
        LD   C,A
        LD   HL,(DF511)
        INC  HL
        XOR  A
        LD   B,A
LF318:  INC  A
        SBC  HL,BC
        JR   Z,LF31F
        JR   NC,LF318
LF31F:  ADD  HL,BC
        DEC  A
        LD   D,A
        LD   E,L
        LD   L,11H
        CALL LF002
        OR   D
        OUT  (P8E),A
        LD   A,E
        OUT  (P8B),A
        INC  HL
        LD   E,(HL)
        INC  HL
        LD   D,(HL)
        LD   HL,(DF50F)
        ADD  HL,DE
        LD   A,L
        OUT  (P8C),A
        LD   A,H
        OUT  (P8D),A
        LD   A,01H
        OUT  (P8A),A
        LD   A,(DF517)
        CP   06H
        JR   Z,LF35D
        LD   A,20H
        OUT  (P8F),A
LF34B:  IN   A,(P8F)
        BIT  3,A
        JR   Z,LF34B
        LD   HL,(DF513)
        LD   BC,0088H
        INIR
        INIR
        JR   LF376
;
LF35D:  LD   A,30H
        OUT  (P8F),A
LF361:  IN   A,(P8F)
        RLA
        JR   C,LF361
LF366:  IN   A,(P8F)
        BIT  3,A
        JR   Z,LF366
        LD   HL,(DF513)
        LD   BC,0088H
        OTIR
        OTIR
LF376:  IN   A,(P8F)
        RLA
        JR   C,LF376
        IN   A,(P8F)
        AND  89H
        RET  Z
        LD   A,0FFH
        LD   (DF51C),A
        RET
;Ansprung unklar
LF386:  EX   DE,HL
        INC  HL
        INC  HL
        INC  HL
        INC  HL
        INC  HL
        LD   A,01H
        RET
;Ansprung unklar
LF38F:  CALL LF3E0
        LD   B,0BH
LF394:  IN   A,(C)
        AND  0FH
        RLCA
        RLCA
        RLCA
        RLCA
        LD   E,A
        DEC  B
        IN   A,(C)
        AND  0FH
        OR   E
        LD   E,(HL)
        LD   (HL),A
        INC  HL
        DEC  B
        JP   P,LF394
        JR   LF3C6
;Ansprung unklar
LF3AC:  CALL LF3CE
        LD   B,0BH
LF3B1:  LD   A,(HL)
        RRCA
        RRCA
        RRCA
        RRCA
        AND  0FH
        OUT  (C),A
        LD   A,(HL)
        AND  0FH
        DEC  B
        OUT  (C),A
        LD   E,(HL)
        INC  HL
        DEC  B
        JP   P,LF3B1
LF3C6:  DEC  HL
        LD   B,0DH
        XOR  A
        OUT  (C),A
        INC  A
        RET
;
LF3CE:  LD   BC,0F85H
        IN   A,(C)
        AND  0FH
        CP   04H
        JR   Z,LF3E0
        LD   A,05H
        OUT  (C),A
        DEC  A
        OUT  (C),A
LF3E0:  LD   BC,0D85H
        LD   A,01H
        OUT  (C),A
        IN   A,(C)
        BIT  1,A
        RET  Z
        XOR  A
        OUT  (C),A
        JR   LF3E0
;Ansprung unklar               fuer Debugging
MOHEX:  DI
        PUSH AF
        CALL AC1MOD
        CALL OUTHEX   ; gibt den Akku als zweistellige Hexzahl auf dem Schirm aus
        CALL CPMMOD
        POP  AF
        EI
        RET
;Ansprung unklar               fuer Debugging
MOHL:   DI
        PUSH AF
        CALL AC1MOD
        CALL OUTHL    ; gibt das HL-Register als vierstellige Hexzahl auf dem Schirm
        RST  08H      ; warten auf Taste
        CALL CPMMOD
        POP  AF
        EI
        RET
;
        DEFM "CONIN-ZBIOS-STACK==26BYTES"
        DEFM "CONIN-ZBIOS-STACK==26BYTES"
CINSP:  DEFM "CONOUT-STACK_CONOUT-STACK_CONOUT-STACK"
COUTSP: DEFM "LOAD-ZBIOS-STACK=48BYTES"
        DEFM "LOAD-ZBIOS-STACK=48BYTES"
LOADSP: DEFM "ZBIOS(C)ML-SOFT 2003 & AC1-BIOS(C)HR 2011"
CPMSTK: NOP
;
RAFTRK: DEFB 0   ; RAFTRK  EQU  0F4C2H
RAFSEC: DEFB 0
        NOP   ; kein Verweis   F4C4
        NOP   ; kein Verweis   F4C5
        NOP   ; kein Verweis   F4C6
        NOP   ; kein Verweis   F4C7
        NOP   ; kein Verweis   F4C8
        NOP   ; kein Verweis   F4C9
CHKSUM: DEFW 0   ; Merkzelle f. Pruefsumme       F4CAh
        NOP      ; kein Verweis   F4CC
CUFLAG: DEFB 1   ;CUON/CUOFF   1/0  KursorFlag   F4CDh
CUALT:  DEFB 20H ;Cursor OFF Symbol
STZ00:  DEFB 0   ;Merkzelle Anz. BS-Steuerzeichen   F4CFh
STZ01:  DEFB 0   ;Merkzelle fuer 1. ESC-Steuerzeichen
STZ02:  DEFB 0   ;Merkzelle fuer 2. ESC-Steuerzeichen
;
CHAR:   DEFB 0   ; Merkzelle Zeichen <> Cursor    F4D2h
;
COLOR:  DEFB 0   ; Merkzelle BWS-Farbe (0=Monochrom-BWS)
COLO1:  DEFB 0   ; aktuelle Farbe ohne invers und intensiv
COLO2:  DEFB 0   ; Farbe fuer Monitor und CP/M Warmstart
;
        NOP      ; kein Verweis   F4D6
        NOP      ; kein Verweis   F4D7
SPCIN:  DEFW 0    ;F4D8
SPCOUT: DEFW 0
SPLOAD: DEFW 0
OLDNMI: DEFW 0    ;F4DE
        NOP      ; kein Verweis   F4E0
        NOP      ; kein Verweis   F4E1
DF4E2:  NOP
        NOP      ; Merkzelle
DF4E4:  NOP
DF4E5:  NOP
DF4E6:  NOP
DF4E7:  NOP
DF4E8:  NOP
DF4E9:  NOP
DF4EA:  NOP
DF4EB:  NOP
        NOP      ; 4 Merkzellen  
        NOP
CTAB:   NOP      ;FDC Befehlsbyte
        NOP      ; 4 Merkzellen  Ende
DF4F0:  NOP      ;F4F0
        NOP      ; kein Verweis   F4F1
        NOP      ; kein Verweis   F4F2
        NOP      ; kein Verweis   F4F3
        NOP      ; kein Verweis   F4F4
        NOP      ; kein Verweis   F4F5
        NOP      ; kein Verweis   F4F6
DF4F7:  NOP
DF4F8:  NOP
DF4F9:  NOP
LATPU:  NOP
DF4FB:  DEFB 4      ; 4 = READ,  6 = WRITE
DRIVE:  DEFB 0      ; LW-Nr.
TRACK:  DEFW 0
SECTOR: DEFW 0      ;F4FF
DMA:    DEFW 0
DPH:    DEFW 0
DF505:  DEFB 0
DF506:  DEFW 0
DF508:  DEFW 0
DF50A:  DEFW 0
        NOP      ; kein Verweis   F50C
        NOP      ; kein Verweis   F50D
DF50E:  NOP
DF50F:  NOP
DF510:  NOP
DF511:  DEFW 0
DF513:  DEFW 0
DF515:  DEFW 0
DF517:  DEFB 4
DF518:  DEFW 0
DF51A:  DEFB 0
DF51B:  NOP
DF51C:  NOP
DF51D:  NOP
DF51E:  NOP
;
        DEFS 1024,0       ;F51Fh
DIRBF:  DEFS 128,0        ;0F91FH
ALL01:  DEFS 50,0         ;0F99FH
ALL02:  DEFS 504,0        ;0F9D1H
ALL03:  DEFS 256,0        ;0FBC9H
ALL04:  DEFS 256,0        ;0FCC9H
ALL05:  DEFS 50,0         ;0FDC9H
ALL06:  DEFS 50,0         ;0FDFBH
CHK00:  DEFS 32,0         ;0FE2DH
CHK02:  DEFS 32,0         ;0FE4DH
CHK06:  DEFS 32,0         ;0FE6DH
        DEFS 115,1AH      ;0FE8DH
ALL00:                    ;ALL00 zeigt hinter das BIOS   FF00
;                          1024k / 2k Bloecke = 512 Bloecke
;                          512 / 8 bit/Byte = 64 Byte ALV benoetigt
;
;
;
;
DFF80   EQU  0FF80H     ; InterruptVectoren ?
DFF82   EQU  0FF82H
DFF84   EQU  0FF84H
DFF86   EQU  0FF86H
DFF88   EQU  0FF88H
DFF8A   EQU  0FF8AH
;
;#############################   PortAdressen   ##############
;
P00     EQU  00H     ; CTC
P01     EQU  01H
P02     EQU  02H
P03     EQU  03H
;
P04     EQU  04H     ; PIO 1
P05     EQU  05H
P06     EQU  06H
;
P11     EQU  11H     ; IOSEL 4   ??
;
P1E     EQU  1EH     ; CP/M - Umschalter
;
P8A     EQU  8AH     ; GIDE ? -> 80h
P8B     EQU  8BH
P8C     EQU  8CH
P8D     EQU  8DH
P8E     EQU  8EH
P8F     EQU  8FH
;
PF0     EQU  0F0H     ; C-BWS-(Steuer)Port
;
;
        .DEPHASE
        END
;